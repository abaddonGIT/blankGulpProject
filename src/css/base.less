@import "variables.less";
@import "util.less";

html {
  font-size: @default-font-html-size;
}

body {
  font-size: @default-font-size;
}

body, html {
  padding: 0;
  margin: 0;
  width: 100%;
  height: 100%;
  -webkit-text-size-adjust: none;
}

/*base classes*/
.clear {
  .clearfix();
}

.left {
  float: left;
}

.right {
  float: right;
}

.block {
  display: block;
}

.b-inline {
  display: inline-block;
}

.inline {
  display: inline;
}

.none {
  display: none;
}

.tcenter {
  text-align: center;
}

.tleft {
  text-align: left;
}

.tright {
  text-align: right;
}

.justify {
  text-align: justify;
  &:after {
    content: '';
    display: inline-block;
    width: 100%;
  }
}

.upper {
  text-transform: uppercase;
}

.lower {
  text-transform: lowercase;
}

.cross {
  text-decoration: line-through;
}

.d-none {
  text-decoration: none;
}

.lazy {
  display: block;
}

#badIE {
  position: fixed;
  width: 100%;
  height: 100%;
  background: #673AB7;

  h1 {
    position: absolute;
    .tcenter;
    top: 48%;
    width: 100%;
    color: @white;
  }
}

.sprite {
  .b-inline;
}

.rotation(@grad) {
  transform: rotate(@grad);
}

.noselect {
  user-select: none;
}

&.res {
  .block;
  width: 100%;
  height: auto;
}

a {
  &:hover, &:active, &:focus {
    outline: none !important;
  }
}

* {
  outline: none;
  box-sizing: border-box;
}

.wow {
  visibility: hidden;
}

/********************************
* Устанавливает размеры жлемента
********************************/
.set-size(@size) {
  width: @size;
  height: @size;
}

.set-size(@width, @height) {
  width: @width;
  height: @height;
}

/********************************************
* Установка placeholder-ра ддля полей ввода
*******************************************/
.placeholder(@color: @default-font-color) {
  &:-moz-placeholder {
    color: @color;
  }
  &::-moz-placeholder {
    color: @color;
  }
  &::-webkit-input-placeholder {
    color: @color;
  }
  &:-ms-input-placeholder {
    color: @color;
  }
}

/********************
* Строит колонки
*****************/

.n-columns(@min-width, @gutter, @max-columns, @last-equal: false) {
  .c-list {
    display: flex;
    flex-wrap: wrap;
    margin-left: -@gutter;
    margin-top: -@gutter;

    .c-item {
      flex: 1 0 @min-width;
      margin-left: @gutter;
      margin-top: @gutter;

      & when (@last-equal) {
        .mediaLoop(@counter) when (@counter <= @max-columns) {
          @screen-width: ((@min-width * @counter)+(@gutter * @counter));
          @column-width: (100%/@counter);

          @media (min-width: @screen-width) {
            max-width: ~'calc(@{column-width} - @{gutter})';
          }
          .mediaLoop((@counter + 1));
        }
        .mediaLoop(2);
      }

      @column-width: (100%/@max-columns);
      @min: (@min-width * @max-columns);
      @media (min-width: @min) {
        min-width: ~'calc(@{column-width} - @{gutter})';
      }
    }
  }
}

